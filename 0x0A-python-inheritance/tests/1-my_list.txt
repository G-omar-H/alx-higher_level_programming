=======================
Unisttest driven devops
=======================

This module defines a class ``Mylist`` that inherits from ``list``` parent.

Instantiation
=============

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

::

Usage
=====

``MyList`` is an inherited ``list`` class, and thus features the same methods.
For instance, elements can be added to a ``MyList`` with the ``append()`` method.

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

Replaced with indexing:

::

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

And removed with the ``remove()`` method.

::

    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]

See the documentation on Python lists for more built-in methods.

``print_sorted`` Method
=======================

``MyList`` implements a single method - a public instance method
``print_sorted(self)``.

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

The order of the original list is not altered after a call to the method.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

::
